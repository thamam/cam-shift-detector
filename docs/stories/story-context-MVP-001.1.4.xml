<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>MVP-001</epicId>
    <storyId>1.4</storyId>
    <title>Result Manager</title>
    <status>Ready</status>
    <generatedAt>2025-10-22</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-1.4.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>camera movement detection system</asA>
    <iWant>build detection result dictionaries and maintain a FIFO history buffer of past detections</iWant>
    <soThat>I can provide structured status information and enable the parent DAF system to query recent detection history</soThat>
    <tasks>
      - Task 1: Create ResultManager class (AC: #1.4.1, #1.4.2, #1.4.3)
        - 1.1: Define __init__(self, threshold_pixels=2.0, history_buffer_size=100)
        - 1.2: Implement create_result(translation_displacement, confidence, frame_id=None)
        - 1.3: Determine status from translation_displacement vs threshold comparison
        - 1.4: Generate ISO 8601 UTC timestamp using datetime
        - 1.5: Auto-generate frame_id if not provided (UUID or timestamp-based)
        - 1.6: Return complete result dictionary matching schema
      - Task 2: Implement history buffer (AC: #1.4.4)
        - 2.1: Use collections.deque with maxlen for FIFO behavior
        - 2.2: Implement add_to_history(result_dict)
        - 2.3: Validate buffer size is positive integer
        - 2.4: Handle buffer overflow automatically (deque maxlen)
      - Task 3: Implement history query methods (AC: #1.4.5)
        - 3.1: Implement get_history() - return all buffer contents as list
        - 3.2: Implement get_last_n(n) - return most recent n results
        - 3.3: Implement get_by_frame_id(frame_id) - search buffer for matching frame_id
        - 3.4: Handle edge cases: empty buffer, n > buffer size, frame_id not found
      - Task 4: Implement input validation (AC: #1.4.6)
        - 4.1: Validate translation_displacement is non-negative float
        - 4.2: Validate confidence is in range [0.0, 1.0]
        - 4.3: Validate threshold_pixels is positive
        - 4.4: Validate history_buffer_size is positive integer
        - 4.5: Raise descriptive ValueError exceptions
      - Task 5: Unit tests (AC: All)
        - 5.1: Test result dict creation with valid inputs
        - 5.2: Test status determination (VALID vs INVALID)
        - 5.3: Test timestamp format (ISO 8601 UTC)
        - 5.4: Test auto frame_id generation
        - 5.5: Test history buffer FIFO behavior (add, evict)
        - 5.6: Test history query methods (get_history, get_last_n, get_by_frame_id)
        - 5.7: Test input validation (invalid translation_displacement, confidence, buffer size)
        - 5.8: Test edge cases (empty buffer, buffer overflow, missing frame_id)
    </tasks>
  </story>

  <acceptanceCriteria>
    <ac id="1.4.1" title="Result Dict Construction">
      ResultManager builds standardized result dictionaries with `status`, `translation_displacement`, `confidence`, `frame_id`, and `timestamp` fields per schema
    </ac>
    <ac id="1.4.2" title="Status Determination">
      Sets `status` to "VALID" when translation_displacement &lt; threshold, "INVALID" when translation_displacement &gt;= threshold
    </ac>
    <ac id="1.4.3" title="Timestamp Generation">
      Generates ISO 8601 UTC timestamps (e.g., "2025-10-18T14:32:18.456Z") for each detection result
    </ac>
    <ac id="1.4.4" title="History Buffer Management">
      Maintains FIFO buffer of last N results (default 100) configured via `history_buffer_size`
    </ac>
    <ac id="1.4.5" title="History Query Interface">
      Provides methods to retrieve recent history: `get_history()`, `get_last_n(n)`, `get_by_frame_id(frame_id)`
    </ac>
    <ac id="1.4.6" title="Error Handling">
      Validates inputs (translation_displacement, confidence ranges) and raises appropriate exceptions for invalid data
    </ac>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-MVP-001.md" title="Technical Specification: Camera Movement Detection Module" section="Services and Modules">
        ResultManager module: Build result dicts, maintain FIFO history buffer. Inputs: Displacement, confidence, frame_id. Outputs: Result dict, history queries. Core component responsible for result management and history buffer.
      </doc>
      <doc path="docs/tech-spec-epic-MVP-001.md" title="Technical Specification: Camera Movement Detection Module" section="Data Models and Contracts">
        Detection Result Schema: status (VALID|INVALID), displacement (float, 2 decimals), confidence [0.0-1.0], frame_id (str), timestamp (ISO 8601 UTC). Confidence score: num_inliers / total_matches. History buffer: FIFO, configurable size (default 100).
      </doc>
      <doc path="docs/stories/story-1.3.md" title="Movement Detector (Done)" section="Completion Notes">
        MovementDetector returns (moved: bool, displacement: float, confidence: float). Displacement is translation magnitude in pixels (rounded to 2 decimals). Confidence is inlier ratio [0.0, 1.0]. Architectural limitation: Only measures translation, not rotation/scale.
      </doc>
    </docs>
    <code>
      <artifact path="src/movement_detector.py" kind="service" symbol="MovementDetector" lines="15-177" reason="Upstream dependency - provides (moved, displacement, confidence) output that ResultManager consumes">
        Returns tuple: (bool moved, float displacement, float confidence). Displacement rounded to 2 decimals. Confidence is inlier ratio [0.0, 1.0]. Note: displacement is translation-only (architectural limitation).
      </artifact>
      <artifact path="src/static_region_manager.py" kind="service" symbol="StaticRegionManager" lines="1-150" reason="Integration context - loads config.json which contains threshold_pixels and history_buffer_size used by ResultManager">
        Loads config.json with threshold_pixels (2.0) and history_buffer_size (100) parameters used by ResultManager initialization.
      </artifact>
      <artifact path="tests/test_movement_detector.py" kind="test" symbol="test_movement_detector" lines="1-430" reason="Testing pattern reference - shows fixture patterns, parametrization, and assertion structure used in this project">
        Comprehensive test patterns: fixtures for baseline/current features, parametrized tests for boundary conditions, edge cases (empty buffer, overflow), error handling with pytest.raises.
      </artifact>
    </code>
    <dependencies>
      <python>
        <package name="collections.deque" version="stdlib" reason="FIFO buffer implementation with maxlen for auto-eviction" />
        <package name="datetime" version="stdlib" reason="ISO 8601 UTC timestamp generation" />
        <package name="uuid" version="stdlib" reason="Auto-generate frame_id if not provided" />
        <package name="pytest" version=">=7.0.0" reason="Unit testing framework" />
        <package name="pytest-cov" version=">=4.0.0" reason="Test coverage measurement" />
      </python>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>TERMINOLOGY: Use "translation_displacement" (not "displacement") in all code, docstrings, and result dictionaries to clarify this only measures translation (architectural limitation from Story 1.3)</constraint>
    <constraint>NO OpenCV or NumPy required - pure Python implementation using stdlib (collections.deque, datetime, uuid)</constraint>
    <constraint>File location: src/result_manager.py (matching module table in tech spec)</constraint>
    <constraint>Test location: tests/test_result_manager.py (following existing test naming convention)</constraint>
    <constraint>Coverage target: >80% for this module (project standard)</constraint>
    <constraint>Error messages must be descriptive with specific value/type information (see Story 1.4 Dev Notes)</constraint>
    <constraint>Timestamp format: ISO 8601 UTC with milliseconds and 'Z' indicator (e.g., "2025-10-18T14:32:18.456Z")</constraint>
    <constraint>Result dictionary field order: status, translation_displacement, confidence, frame_id, timestamp</constraint>
    <constraint>Status values: Exactly "VALID" or "INVALID" (string literals, uppercase)</constraint>
    <constraint>Input validation: Raise ValueError for invalid inputs (not AssertionError or TypeError)</constraint>
    <constraint>FIFO buffer implementation: collections.deque with maxlen parameter for automatic eviction</constraint>
    <constraint>Query methods return lists (not deque objects) for consistent API</constraint>
    <constraint>Round translation_displacement to 2 decimals, confidence to 2 decimals (matching MovementDetector output)</constraint>
    <constraint>Class docstring must document architectural limitation (translation-only measurement)</constraint>
    <constraint>Method docstrings must include Args, Returns, Raises sections (following existing code style)</constraint>
  </constraints>

  <interfaces>
    <interface name="MovementDetector.detect_movement" kind="upstream-dependency" signature="detect_movement(baseline_features, current_features) -> Tuple[bool, float, float]" path="src/movement_detector.py">
      Returns: (moved: bool, displacement: float [2 decimals], confidence: float [2 decimals, 0.0-1.0])
      Note: displacement is translation-only (architectural limitation)
    </interface>
    <interface name="ResultManager.__init__" kind="class-method" signature="__init__(self, threshold_pixels: float = 2.0, history_buffer_size: int = 100)" path="src/result_manager.py">
      Initialize ResultManager with threshold and buffer size. Validates positive threshold and positive integer buffer size.
    </interface>
    <interface name="ResultManager.create_result" kind="class-method" signature="create_result(self, translation_displacement: float, confidence: float, frame_id: Optional[str] = None) -> Dict[str, any]" path="src/result_manager.py">
      Create standardized result dictionary. Auto-generates frame_id if None. Returns dict with status, translation_displacement, confidence, frame_id, timestamp.
    </interface>
    <interface name="ResultManager.add_to_history" kind="class-method" signature="add_to_history(self, result: Dict[str, any]) -> None" path="src/result_manager.py">
      Add result to FIFO history buffer. Validates required fields present. Auto-evicts oldest if buffer full.
    </interface>
    <interface name="ResultManager.get_history" kind="class-method" signature="get_history(self) -> List[Dict[str, any]]" path="src/result_manager.py">
      Return all results in history buffer as list (oldest to newest).
    </interface>
    <interface name="ResultManager.get_last_n" kind="class-method" signature="get_last_n(self, n: int) -> List[Dict[str, any]]" path="src/result_manager.py">
      Return most recent n results. If n > buffer size, return all available results.
    </interface>
    <interface name="ResultManager.get_by_frame_id" kind="class-method" signature="get_by_frame_id(self, frame_id: str) -> Optional[Dict[str, any]]" path="src/result_manager.py">
      Search buffer for result with matching frame_id. Return first match or None if not found.
    </interface>
  </interfaces>

  <tests>
    <standards>
      Python pytest framework (>=7.0.0) with pytest-cov for coverage measurement. Test file: tests/test_result_manager.py.
      Use @pytest.fixture for reusable test data (result_manager instances, sample results).
      Test categories: Happy path (valid inputs), Boundary conditions (threshold equality, buffer full), Error cases (invalid inputs), Edge cases (empty buffer, auto frame_id).
      Assertion style: assert condition with descriptive messages.
      Error testing: pytest.raises(ValueError, match="pattern").
      Coverage target: >80% for ResultManager module.
      Test naming: test_&lt;method_name&gt;_&lt;scenario&gt; (e.g., test_create_result_valid_status, test_history_buffer_fifo).
    </standards>
    <locations>
      <location>tests/test_result_manager.py</location>
    </locations>
    <ideas>
      <idea ac="1.4.1" desc="Test result dict creation with valid translation_displacement (1.5px), confidence (0.95), explicit frame_id. Verify all fields present with correct types and values." />
      <idea ac="1.4.2" desc="Test status determination: translation_displacement=1.5 (below 2.0) -> VALID, translation_displacement=3.0 (above 2.0) -> INVALID, translation_displacement=2.0 (exactly threshold) -> INVALID" />
      <idea ac="1.4.3" desc="Test timestamp format: verify ISO 8601 UTC with milliseconds, ends with 'Z', parseable by datetime.fromisoformat()" />
      <idea ac="1.4.4" desc="Test FIFO buffer: add 150 results to buffer(size=100), verify only last 100 kept, oldest evicted" />
      <idea ac="1.4.5" desc="Test get_history() returns all results as list, get_last_n(10) returns 10 most recent, get_by_frame_id('test_001') finds match" />
      <idea ac="1.4.6" desc="Test validation: translation_displacement=-1.0 raises ValueError, confidence=1.5 raises ValueError, threshold_pixels=0 raises ValueError" />
      <idea ac="All" desc="Test auto frame_id generation when None provided (UUID or timestamp-based)" />
      <idea ac="All" desc="Test edge case: query empty buffer returns empty list, get_last_n(n) where n > buffer size returns all available" />
      <idea ac="All" desc="Test edge case: get_by_frame_id with non-existent frame_id returns None" />
      <idea ac="All" desc="Test buffer initialized with correct maxlen from history_buffer_size parameter" />
      <idea ac="All" desc="Test result dict field order matches schema: status, translation_displacement, confidence, frame_id, timestamp" />
      <idea ac="All" desc="Test rounding: translation_displacement and confidence rounded to 2 decimals" />
    </ideas>
  </tests>
</story-context>
