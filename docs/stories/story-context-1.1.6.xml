<?xml version="1.0" encoding="UTF-8"?>
<story-context>
  <metadata>
    <story_id>1.6</story_id>
    <story_title>ROI Selection Tool</story_title>
    <epic_id>MVP-001</epic_id>
    <project_name>cam-shift-detector</project_name>
    <created>2025-10-23</created>
    <phase>Implementation</phase>
    <dependencies>
      <dependency story_id="1.2" component="FeatureExtractor" status="complete">
        Feature validation logic for ROI selection
      </dependency>
      <dependency story_id="1.1" component="StaticRegionManager" status="complete">
        Config schema reference for output generation
      </dependency>
    </dependencies>
  </metadata>

  <artifacts>
    <artifact id="tech-spec-services-modules" type="technical-specification">
      <source>docs/tech-spec-epic-MVP-001.md</source>
      <section>Services and Modules</section>
      <content>
**ROI Selection Tool**
- File: `tools/select_roi.py`
- Responsibility: Interactive GUI for defining static regions
- Inputs: Image (camera/file)
- Outputs: `config.json` with ROI coordinates
- Owner: Utility

**Purpose**: Provides OpenCV GUI interface for operator-driven ROI selection with real-time feature validation (≥50 features required). Outputs validated config.json consumed by StaticRegionManager and CameraMovementDetector.
      </content>
    </artifact>

    <artifact id="tech-spec-config-schema" type="technical-specification">
      <source>docs/tech-spec-epic-MVP-001.md</source>
      <section>Data Models and Contracts - Configuration Schema</section>
      <content>
**Configuration Schema** (`config.json`):
```json
{
  "roi": {
    "x": 100,              // ROI top-left X coordinate (pixels)
    "y": 50,               // ROI top-left Y coordinate (pixels)
    "width": 400,          // ROI width (pixels)
    "height": 300          // ROI height (pixels)
  },
  "threshold_pixels": 2.0,         // Displacement threshold (float)
  "history_buffer_size": 100,      // FIFO buffer size (int)
  "min_features_required": 50      // Minimum ORB features in ROI (int)
}
```

**Validation Requirements**:
- ROI coordinates must be non-negative integers
- Width and height must be positive (>0)
- ROI must fit within image bounds
- Minimum 50 ORB features required in selected region
      </content>
    </artifact>

    <artifact id="tech-spec-setup-workflow" type="technical-specification">
      <source>docs/tech-spec-epic-MVP-001.md</source>
      <section>Workflows and Sequencing - Setup Workflow</section>
      <content>
**Setup Workflow** (Operator-driven ROI selection):

1. Operator downloads recent image from cloud (or uses local camera)
2. Run: `python tools/select_roi.py --source image --path site_image.jpg`
3. GUI displays image → Operator clicks/drags to define static region
4. Tool validates: ≥50 ORB features detected in ROI?
   - Yes → Save config.json with ROI coordinates
   - No → Warning, request different region or larger area
5. Deploy config.json to site
6. Initialize detector: `detector = CameraMovementDetector('config.json')`
7. Capture baseline: `detector.set_baseline(initial_image)`

**Key Points**:
- Interactive cv2.selectROI() for rectangle selection
- Real-time feature validation using FeatureExtractor
- Reselection support if validation fails
- Clear error messages for operator guidance
      </content>
    </artifact>

    <artifact id="tech-spec-acceptance-criteria" type="technical-specification">
      <source>docs/tech-spec-epic-MVP-001.md</source>
      <section>Acceptance Criteria</section>
      <content>
**AC-008: ROI Selection Tool**
Tool enables operator to define static region, validates ≥50 features, saves valid `config.json`

**Test Idea**: Manual test - Run tool on sample image, define region, verify config.json valid and feature count ≥50

**Traceability**:
- Component: `tools/select_roi.py`
- Integration: StaticRegionManager (consumes config.json), FeatureExtractor (validates features)
      </content>
    </artifact>

    <artifact id="feature-extractor-implementation" type="code-reference">
      <source>src/feature_extractor.py</source>
      <component>FeatureExtractor</component>
      <purpose>Reference implementation for feature validation logic</purpose>
      <key_methods>
        <method name="__init__">
          <signature>def __init__(self, min_features_required: int = 50) -> None</signature>
          <description>Initialize ORB detector with minimum feature threshold</description>
        </method>
        <method name="extract_features">
          <signature>def extract_features(self, image: np.ndarray, mask: np.ndarray) -> Tuple[List[cv2.KeyPoint], np.ndarray]</signature>
          <description>Extract ORB features from masked image region</description>
          <returns>Tuple of (keypoints, descriptors)</returns>
        </method>
        <method name="set_baseline">
          <signature>def set_baseline(self, image: np.ndarray, mask: np.ndarray) -> None</signature>
          <description>Validates minimum feature count during baseline capture</description>
          <raises>ValueError if feature_count &lt; min_features_required</raises>
        </method>
      </key_methods>
      <usage_pattern>
```python
# Validation logic from FeatureExtractor
extractor = FeatureExtractor(min_features_required=50)
keypoints, descriptors = extractor.extract_features(image, mask)
feature_count = len(keypoints)

if feature_count &lt; 50:
    raise ValueError(f"Insufficient features: {feature_count} &lt; 50 required")
```
      </usage_pattern>
    </artifact>

    <artifact id="static-region-manager-schema" type="code-reference">
      <source>src/static_region_manager.py</source>
      <component>StaticRegionManager</component>
      <purpose>Reference for config.json schema validation</purpose>
      <config_validation>
**Required Fields**:
- `roi` (dict): Must contain x, y, width, height
- `x` (int): Non-negative, top-left X coordinate
- `y` (int): Non-negative, top-left Y coordinate
- `width` (int): Positive (&gt;0), ROI width
- `height` (int): Positive (&gt;0), ROI height

**Validation Logic** (reference):
```python
# From StaticRegionManager._load_and_validate_config()
if 'roi' not in config:
    raise ValueError("Invalid config schema: missing required field 'roi'")

required_fields = ['x', 'y', 'width', 'height']
for field in required_fields:
    if field not in roi:
        raise ValueError(f"Invalid config schema: missing required field 'roi.{field}'")
    if not isinstance(roi[field], int):
        raise ValueError(f"Invalid config schema: 'roi.{field}' must be an integer")

if roi['x'] &lt; 0 or roi['y'] &lt; 0:
    raise ValueError("x and y must be non-negative")
if roi['width'] &lt;= 0 or roi['height'] &lt;= 0:
    raise ValueError("width and height must be positive")
```
      </config_validation>
    </artifact>

    <artifact id="opencv-selectroi-api" type="external-api-reference">
      <library>OpenCV (cv2)</library>
      <function>cv2.selectROI()</function>
      <purpose>Built-in interactive rectangle selection GUI</purpose>
      <documentation>
**cv2.selectROI() Usage**:
```python
import cv2

# Interactive rectangle selection
roi = cv2.selectROI(
    windowName="ROI Selection - Press SPACE to confirm, ESC to cancel",
    img=image,
    showCrosshair=True,
    fromCenter=False
)

# Returns tuple: (x, y, width, height)
x, y, width, height = roi

# Returns (0, 0, 0, 0) if user cancels (ESC key)
if width == 0 or height == 0:
    print("Selection cancelled or empty")
```

**User Interaction**:
- Click and drag to define rectangle
- SPACE key to confirm selection
- ESC key to cancel
- Visual feedback with rectangle overlay during selection
      </documentation>
    </artifact>
  </artifacts>

  <interfaces>
    <interface type="cli-tool">
      <name>ROI Selection Tool</name>
      <command>python tools/select_roi.py --source image --path &lt;image_path&gt;</command>
      <arguments>
        <argument name="--source" required="true" type="choice">
          <choices>
            <choice value="image">Load from image file</choice>
            <choice value="camera">Capture from camera (future extension)</choice>
          </choices>
          <description>Input source type</description>
        </argument>
        <argument name="--path" required="conditional" type="string">
          <condition>Required when --source=image</condition>
          <description>Path to image file</description>
          <validation>File must exist and be valid image format</validation>
        </argument>
      </arguments>
      <outputs>
        <output type="file" path="config.json">
          <description>Configuration file with validated ROI coordinates</description>
          <schema>
{
  "roi": {"x": int, "y": int, "width": int, "height": int},
  "threshold_pixels": 2.0,
  "history_buffer_size": 100,
  "min_features_required": 50
}
          </schema>
        </output>
        <output type="stdout">
          <success_message>✓ Validation passed (≥50 features)\n✓ Config saved to config.json</success_message>
          <failure_message>✗ Validation failed: {count} &lt; 50 required features\nPlease select a different region with more texture/features</failure_message>
        </output>
      </outputs>
      <error_handling>
        <error type="FileNotFoundError">
          <message>Image file not found: {path}</message>
          <exit_code>1</exit_code>
        </error>
        <error type="InvalidImageError">
          <message>Failed to load image from {path}. File may be corrupted.</message>
          <exit_code>1</exit_code>
        </error>
        <error type="UserCancellation">
          <message>Operation cancelled by user</message>
          <exit_code>0</exit_code>
        </error>
      </error_handling>
    </interface>

    <interface type="gui-workflow">
      <name>Interactive ROI Selection</name>
      <flow>
        <step number="1">
          <action>Display image in OpenCV window with instructions</action>
          <display_text>Click and drag to select static region. Press SPACE to confirm, ESC to cancel.</display_text>
        </step>
        <step number="2">
          <action>User selects rectangle using cv2.selectROI()</action>
          <user_interaction>Click-drag to define ROI, SPACE to confirm, ESC to cancel</user_interaction>
        </step>
        <step number="3">
          <action>Extract ROI coordinates (x, y, width, height)</action>
          <validation>Check for empty selection (width=0 or height=0)</validation>
        </step>
        <step number="4">
          <action>Validate feature count using FeatureExtractor</action>
          <validation>Count ≥ 50 ORB features in selected region</validation>
          <visual_feedback>Display feature count to operator</visual_feedback>
        </step>
        <step number="5" condition="validation_passed">
          <action>Save config.json and exit</action>
          <success_message>✓ Validation passed (≥50 features)\n✓ Config saved to config.json</success_message>
        </step>
        <step number="5" condition="validation_failed">
          <action>Display warning and loop back to step 1</action>
          <failure_message>✗ Validation failed: {count} &lt; 50 required features\nPlease select a different region with more texture/features</failure_message>
          <allow_reselection>true</allow_reselection>
        </step>
      </flow>
    </interface>
  </interfaces>

  <testing_standards>
    <framework>pytest</framework>
    <coverage_target>80%</coverage_target>

    <test_categories>
      <category name="CLI Interface Testing">
        <description>Argument parsing, validation, help text</description>
        <test_ideas>
          <test>Test --source argument accepts "image" and "camera"</test>
          <test>Test --path required when --source=image</test>
          <test>Test --path validation fails for missing file</test>
          <test>Test --help displays usage instructions</test>
          <test>Test error message for missing required arguments</test>
        </test_ideas>
      </category>

      <category name="Image Loading">
        <description>Valid images, missing files, corrupted files</description>
        <test_ideas>
          <test>Test load_image() with valid image file</test>
          <test>Test load_image() raises FileNotFoundError for missing file</test>
          <test>Test load_image() handles corrupted image (cv2.imread returns None)</test>
          <test>Test image format validation (H×W×3, uint8, BGR)</test>
        </test_ideas>
      </category>

      <category name="ROI Selection Logic">
        <description>Interactive selection, user cancellation, empty ROI</description>
        <test_ideas>
          <test>Test select_roi_interactive() returns valid coordinates</test>
          <test>Test select_roi_interactive() handles ESC key (user cancellation)</test>
          <test>Test select_roi_interactive() detects empty selection (width=0 or height=0)</test>
          <test>Test ROI coordinates are non-negative integers</test>
        </test_ideas>
        <note>GUI interaction (cv2.selectROI) requires manual testing - unit tests focus on validation logic</note>
      </category>

      <category name="Feature Validation">
        <description>Pass case (≥50), fail case (&lt;50), boundary case (exactly 50)</description>
        <test_ideas>
          <test>Test validate_roi_features() with region containing ≥50 features (PASS)</test>
          <test>Test validate_roi_features() with region containing &lt;50 features (FAIL)</test>
          <test>Test validate_roi_features() with exactly 50 features (boundary PASS)</test>
          <test>Test mask generation from ROI coordinates matches expected binary pattern</test>
          <test>Test integration with FeatureExtractor.extract_features()</test>
        </test_ideas>
      </category>

      <category name="Config Generation">
        <description>File created, correct schema, valid coordinates</description>
        <test_ideas>
          <test>Test save_config() creates config.json file</test>
          <test>Test config.json contains all required fields (roi, threshold_pixels, etc.)</test>
          <test>Test ROI coordinates saved as integers</test>
          <test>Test default parameters (threshold_pixels=2.0, history_buffer_size=100, min_features_required=50)</test>
          <test>Test config.json can be loaded by StaticRegionManager without errors</test>
        </test_ideas>
      </category>

      <category name="Reselection Workflow">
        <description>Multiple attempts, validation success after retry</description>
        <test_ideas>
          <test>Test reselection loop allows multiple attempts until validation passes</test>
          <test>Test reselection loop exits when user cancels (ESC)</test>
          <test>Test feature count displayed after each selection attempt</test>
          <test>Test warning message displayed when validation fails</test>
        </test_ideas>
        <note>Reselection workflow requires manual testing with GUI</note>
      </category>

      <category name="Error Handling">
        <description>Missing file, no display available, user ESC</description>
        <test_ideas>
          <test>Test FileNotFoundError raised for missing image file</test>
          <test>Test error message for corrupted image file</test>
          <test>Test graceful exit when user cancels (ESC key)</test>
          <test>Test empty ROI detection (width=0 or height=0)</test>
          <test>Test OpenCV GUI errors handled gracefully (e.g., no display available)</test>
        </test_ideas>
      </category>
    </test_categories>

    <manual_test_checklist>
      <test priority="high">Run with valid sample image → ROI selection GUI appears</test>
      <test priority="high">Select region with sufficient features → Validation passes, config.json created</test>
      <test priority="high">Select region with insufficient features → Validation fails, reselection offered</test>
      <test priority="high">Press ESC during selection → "Operation cancelled" message, tool exits</test>
      <test priority="medium">Select empty ROI (no drag) → Error message, reselection offered</test>
      <test priority="medium">Run with missing image path → Clear error message</test>
      <test priority="medium">Run with --help → Usage instructions displayed</test>
      <test priority="high">Verify config.json schema matches expected format</test>
      <test priority="high">Load config.json with StaticRegionManager → No errors</test>
      <test priority="high">Use config.json with CameraMovementDetector → Detector initializes successfully</test>
    </manual_test_checklist>

    <integration_tests>
      <test name="test_config_output_integrates_with_static_region_manager">
        <description>Verify generated config.json can be loaded by StaticRegionManager</description>
        <steps>
          1. Generate config.json using ROI selection tool with test image
          2. Initialize StaticRegionManager(config.json)
          3. Call get_static_mask() and verify no errors
          4. Verify mask dimensions match image dimensions
        </steps>
      </test>
      <test name="test_config_output_integrates_with_camera_movement_detector">
        <description>Verify generated config.json can be used to initialize CameraMovementDetector</description>
        <steps>
          1. Generate config.json using ROI selection tool
          2. Initialize CameraMovementDetector(config.json)
          3. Call set_baseline() with test image
          4. Verify baseline features captured successfully
        </steps>
      </test>
    </integration_tests>

    <edge_cases>
      <case>Empty ROI selection (width=0 or height=0) - should be detected and rejected</case>
      <case>ROI outside image bounds - should be prevented by cv2.selectROI() but validate defensively</case>
      <case>Image with very few features (blank wall) - validation should fail gracefully</case>
      <case>User cancels before completing selection - exit gracefully with status message</case>
      <case>Multiple reselection attempts (>5) - allow unlimited retries until user cancels or succeeds</case>
    </edge_cases>
  </testing_standards>

  <implementation_guidance>
    <file_structure>
      <location>tools/select_roi.py</location>
      <directory_creation>Create tools/ directory if not exists</directory_creation>
      <dependencies>
        - argparse (Python stdlib)
        - cv2 (OpenCV)
        - json (Python stdlib)
        - numpy
        - pathlib (Python stdlib)
        - src.feature_extractor (existing component)
      </dependencies>
    </file_structure>

    <code_structure>
      <constants>
MIN_FEATURES_REQUIRED = 50
DEFAULT_THRESHOLD_PIXELS = 2.0
DEFAULT_HISTORY_BUFFER_SIZE = 100
      </constants>

      <functions>
        <function name="parse_arguments">
          <purpose>Parse and validate CLI arguments</purpose>
          <returns>argparse.Namespace</returns>
        </function>

        <function name="load_image">
          <signature>def load_image(image_path: str) -> np.ndarray</signature>
          <purpose>Load and validate image from file path</purpose>
          <raises>FileNotFoundError, ValueError</raises>
        </function>

        <function name="create_mask_from_roi">
          <signature>def create_mask_from_roi(roi_coords: tuple, image_shape: tuple) -> np.ndarray</signature>
          <purpose>Generate binary mask for ROI coordinates</purpose>
          <returns>Binary mask (H×W, uint8)</returns>
        </function>

        <function name="validate_roi_features">
          <signature>def validate_roi_features(image: np.ndarray, roi_coords: tuple) -> tuple</signature>
          <purpose>Validate sufficient features detected in ROI</purpose>
          <returns>Tuple of (feature_count, success_flag)</returns>
        </function>

        <function name="save_config">
          <signature>def save_config(roi_coords: tuple, output_path: str = 'config.json')</signature>
          <purpose>Save validated ROI to config.json</purpose>
        </function>

        <function name="select_roi_interactive">
          <signature>def select_roi_interactive(image: np.ndarray) -> tuple</signature>
          <purpose>Interactive ROI selection using cv2.selectROI()</purpose>
          <returns>Tuple of (x, y, width, height) or None if cancelled</returns>
        </function>

        <function name="main">
          <purpose>Main execution flow with reselection loop</purpose>
        </function>
      </functions>

      <main_workflow>
1. Parse CLI arguments (--source, --path)
2. Load image from file path
3. Enter reselection loop:
   a. Display interactive ROI selection GUI (cv2.selectROI)
   b. Extract ROI coordinates
   c. Handle user cancellation (return None)
   d. Validate feature count using FeatureExtractor
   e. If valid (≥50 features): save config.json and break
   f. If invalid (&lt;50 features): display warning and continue loop
      </main_workflow>
    </code_structure>

    <key_implementation_notes>
      <note priority="critical">
Use cv2.selectROI() for interactive rectangle selection - it's a built-in OpenCV function that handles all GUI interaction, mouse events, and visual feedback automatically.
      </note>

      <note priority="critical">
Reuse FeatureExtractor for validation logic - create binary mask from ROI coordinates, then call extract_features() to get keypoint count. This ensures consistency with baseline capture logic.
      </note>

      <note priority="high">
Config output must match StaticRegionManager schema exactly - include all required fields (roi, threshold_pixels, history_buffer_size, min_features_required) with correct types.
      </note>

      <note priority="high">
Handle user cancellation gracefully - cv2.selectROI() returns (0, 0, 0, 0) when user presses ESC. Detect this and exit with appropriate message.
      </note>

      <note priority="medium">
Provide clear visual feedback - display instructions in window title, print feature count and validation status to console after each selection attempt.
      </note>

      <note priority="medium">
Allow unlimited reselection attempts - don't limit the number of retries, let the user keep trying until they select a valid region or cancel.
      </note>
    </key_implementation_notes>

    <reference_implementation>
The story file (story-1.6.md) contains a complete reference implementation in the Dev Notes section, including:
- Full module structure with docstrings
- CLI argument parsing with argparse
- Image loading and validation logic
- Interactive ROI selection with cv2.selectROI()
- Feature validation using FeatureExtractor
- Config generation with proper schema
- Reselection loop with user feedback
- Error handling for all edge cases

Developers should refer to story-1.6.md lines 102-229 for the complete implementation template.
    </reference_implementation>
  </implementation_guidance>

  <acceptance_criteria_mapping>
    <ac id="AC-1.6.1" description="CLI Interface">
      <test_coverage>
        - parse_arguments() with valid/invalid --source values
        - --path validation when --source=image
        - --help text display
        - Error messages for missing arguments
      </test_coverage>
      <implementation_files>tools/select_roi.py (parse_arguments function)</implementation_files>
    </ac>

    <ac id="AC-1.6.2" description="Image Display">
      <test_coverage>
        - load_image() loads valid image successfully
        - GUI window displays image (manual test)
        - Instructions displayed in window title
      </test_coverage>
      <implementation_files>tools/select_roi.py (load_image, main functions)</implementation_files>
    </ac>

    <ac id="AC-1.6.3" description="Interactive ROI Selection">
      <test_coverage>
        - select_roi_interactive() returns valid coordinates
        - cv2.selectROI() provides visual feedback (manual test)
        - Rectangle overlay during selection (manual test)
      </test_coverage>
      <implementation_files>tools/select_roi.py (select_roi_interactive function)</implementation_files>
    </ac>

    <ac id="AC-1.6.4" description="Feature Validation">
      <test_coverage>
        - validate_roi_features() extracts features correctly
        - FeatureExtractor integration with binary mask
        - Feature count validation (≥50 threshold)
      </test_coverage>
      <implementation_files>tools/select_roi.py (validate_roi_features, create_mask_from_roi functions)</implementation_files>
    </ac>

    <ac id="AC-1.6.5" description="Validation Feedback">
      <test_coverage>
        - Feature count displayed to operator
        - PASS/FAIL status shown with clear messaging
        - Console output tested with various feature counts
      </test_coverage>
      <implementation_files>tools/select_roi.py (main function, validation feedback logic)</implementation_files>
    </ac>

    <ac id="AC-1.6.6" description="Config Generation">
      <test_coverage>
        - save_config() creates valid config.json
        - All required fields present with correct types
        - ROI coordinates saved as integers
        - Generated config loads successfully in StaticRegionManager
      </test_coverage>
      <implementation_files>tools/select_roi.py (save_config function)</implementation_files>
    </ac>

    <ac id="AC-1.6.7" description="Error Handling">
      <test_coverage>
        - FileNotFoundError for missing image
        - ValueError for corrupted image (cv2.imread returns None)
        - Graceful exit on user cancellation (ESC key)
        - Clear error messages for all failure modes
      </test_coverage>
      <implementation_files>tools/select_roi.py (load_image, select_roi_interactive, main functions)</implementation_files>
    </ac>

    <ac id="AC-1.6.8" description="Reselection Support">
      <test_coverage>
        - Reselection loop continues until validation passes
        - Warning message displayed on validation failure
        - Multiple attempts allowed without restart
        - User can cancel at any point (ESC)
      </test_coverage>
      <implementation_files>tools/select_roi.py (main function, while loop logic)</implementation_files>
    </ac>
  </acceptance_criteria_mapping>

  <notes>
    <note type="integration">
This tool is a one-time setup utility, not part of the runtime detection pipeline. It outputs config.json which is consumed by StaticRegionManager during CameraMovementDetector initialization.
    </note>

    <note type="testing">
GUI interaction requires manual testing. Automated tests should focus on validation logic (feature extraction, config generation, error handling) while GUI workflow is tested manually with real images.
    </note>

    <note type="deployment">
The tool should be run locally by operators during site setup. The generated config.json is then deployed to the production environment and version-controlled with the codebase.
    </note>

    <note type="future-extension">
--source camera option is defined but not implemented in MVP. This allows for future extension to capture ROI from live camera feed without changing the CLI interface.
    </note>
  </notes>
</story-context>
