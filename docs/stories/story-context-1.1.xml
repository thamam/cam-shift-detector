<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1</storyId>
    <title>Static Region Manager</title>
    <status>Ready</status>
    <generatedAt>2025-10-18</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-1.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>camera movement detection system</asA>
    <iWant>load ROI coordinates from configuration and crop images to the static region</iWant>
    <soThat>feature extraction operates only on stable areas (tank walls, pipes) and avoids dynamic elements (water, bubbles)</soThat>
    <tasks>
      - Task 1: Create StaticRegionManager class (AC: #1.1.1, #1.1.2)
        - 1.1: Define __init__(self, config_path) - load and validate config
        - 1.2: Implement config schema validation (x, y, width, height)
        - 1.3: Define crop_to_static_region(self, image) - crop image to ROI
        - 1.4: Store ROI as instance variable for efficient access
      - Task 2: Implement boundary validation (AC: #1.1.3)
        - 2.1: Add validation in crop_to_static_region() to check ROI vs image bounds
        - 2.2: Raise ValueError with clear message if out of bounds
      - Task 3: Implement error handling (AC: #1.1.4)
        - 3.1: Handle missing config file with FileNotFoundError
        - 3.2: Validate JSON structure and raise ValueError for schema violations
        - 3.3: Validate image format (NumPy array, H×W×3, uint8)
      - Task 4: Unit tests (AC: All)
        - 4.1: Test successful config loading with valid config.json
        - 4.2: Test successful image cropping with various image sizes
        - 4.3: Test boundary validation (ROI within bounds, ROI out of bounds)
        - 4.4: Test error cases (missing file, invalid JSON, invalid image format)
        - 4.5: Test edge cases (ROI at image boundaries, 1×1 ROI, full image ROI)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1.1.1">
      <title>Config Loading</title>
      <description>StaticRegionManager loads ROI coordinates from config.json with schema validation (x, y, width, height must be positive integers)</description>
    </criterion>
    <criterion id="1.1.2">
      <title>Image Cropping</title>
      <description>Given a full image array (H×W×3, uint8, BGR) and ROI coordinates, returns cropped image containing only the static region</description>
    </criterion>
    <criterion id="1.1.3">
      <title>Boundary Validation</title>
      <description>Validates that ROI coordinates are within image bounds; raises ValueError if ROI exceeds image dimensions</description>
    </criterion>
    <criterion id="1.1.4">
      <title>Error Handling</title>
      <description>Raises appropriate exceptions for: Missing config file (FileNotFoundError), Invalid JSON schema (ValueError with descriptive message), Invalid image format (not NumPy array, wrong shape/dtype)</description>
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-spec-epic-MVP-001.md</path>
        <title>Technical Specification: Camera Movement Detection Module</title>
        <section>Services and Modules</section>
        <snippet>StaticRegionManager (src/static_region_manager.py) - Load ROI config, crop images to static region. Inputs: Config file, full image. Outputs: Cropped image (ROI only).</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-MVP-001.md</path>
        <title>Technical Specification: Camera Movement Detection Module</title>
        <section>Data Models and Contracts - Configuration Schema</section>
        <snippet>config.json defines roi object with x, y, width, height (integers), threshold_pixels (float, default 2.0), history_buffer_size (int, default 100), min_features_required (int, default 50).</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-MVP-001.md</path>
        <title>Technical Specification: Camera Movement Detection Module</title>
        <section>System Architecture Alignment</section>
        <snippet>Component Dependencies: Static Region Manager depends on Config file (config.json). Data Flow: Image array (input) → Crop to ROI → Extract features → Match to baseline.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-MVP-001.md</path>
        <title>Technical Specification: Camera Movement Detection Module</title>
        <section>Dependencies and Integrations</section>
        <snippet>External Dependencies: opencv-python>=4.8.0,&lt;5.0.0 (Computer vision library), numpy>=1.24.0,&lt;2.0.0 (Array operations). Python 3.8+ required.</snippet>
      </doc>
      <doc>
        <path>docs/MVP_Camera_Movement_Detection_SIMPLIFIED.md</path>
        <title>MVP Camera Movement Detection - Simplified PRD</title>
        <section>4.1 Static Region Manager</section>
        <snippet>Loads ROI coordinates from config.json and crops camera images to static region only. Validates ROI bounds. Returns cropped image for feature extraction.</snippet>
      </doc>
    </docs>
    <code>
      <!-- No existing code - greenfield project. First module to be implemented. -->
    </code>
    <dependencies>
      <python>
        <package name="numpy" version=">=1.24.0,&lt;2.0.0" />
        <package name="opencv-python" version=">=4.8.0,&lt;5.0.0" />
        <package name="pytest" scope="dev" note="Testing framework" />
      </python>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>
      <type>Architecture</type>
      <rule>Black-box design: Module exposes only necessary public methods (crop_to_static_region). Internals remain private.</rule>
    </constraint>
    <constraint>
      <type>Data Validation</type>
      <rule>Config must have 'roi' key with nested x, y, width, height fields. All values must be positive integers.</rule>
    </constraint>
    <constraint>
      <type>Image Format</type>
      <rule>Input images must be NumPy arrays with shape (H, W, 3) and dtype uint8, BGR color format.</rule>
    </constraint>
    <constraint>
      <type>Error Handling</type>
      <rule>Raise FileNotFoundError for missing config files. Raise ValueError for invalid schemas, invalid images, or out-of-bounds ROI.</rule>
    </constraint>
    <constraint>
      <type>File Structure</type>
      <rule>Implementation: src/static_region_manager.py. Tests: tests/test_static_region_manager.py. Sample config: config.json at project root.</rule>
    </constraint>
    <constraint>
      <type>Testing</type>
      <rule>Use pytest framework. Target >90% code coverage. Test happy path, boundary conditions, error cases, and edge cases.</rule>
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>StaticRegionManager.__init__</name>
      <kind>Class Constructor</kind>
      <signature>def __init__(self, config_path: str) -> None</signature>
      <description>Load and validate ROI configuration from JSON file. Raises FileNotFoundError if config missing, ValueError if schema invalid.</description>
    </interface>
    <interface>
      <name>StaticRegionManager.crop_to_static_region</name>
      <kind>Instance Method</kind>
      <signature>def crop_to_static_region(self, image: np.ndarray) -> np.ndarray</signature>
      <description>Crop full image to static ROI. Validates image format and ROI bounds. Returns cropped image array (h×w×3). Raises ValueError if image invalid or ROI out of bounds.</description>
    </interface>
    <interface>
      <name>config.json - ROI Schema</name>
      <kind>Configuration File</kind>
      <signature>{"roi": {"x": int, "y": int, "width": int, "height": int}}</signature>
      <description>JSON configuration defining Region of Interest coordinates. All values must be positive integers.</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Use pytest framework with >90% coverage target for this module. Test categories: (1) Happy path - valid config and images, successful cropping; (2) Boundary conditions - ROI at edges, minimal/maximal sizes; (3) Error cases - missing file, invalid JSON, invalid image, out-of-bounds ROI; (4) Edge cases - 1×1 ROI, full-image ROI, non-square ROIs. Follow AAA pattern (Arrange-Act-Assert).
    </standards>
    <locations>
      tests/test_static_region_manager.py
    </locations>
    <ideas>
      <idea ac="1.1.1">
        - test_load_valid_config(): Verify StaticRegionManager loads valid config.json successfully
        - test_load_missing_config(): Verify FileNotFoundError raised when config missing
        - test_load_invalid_json(): Verify ValueError raised for malformed JSON
        - test_load_invalid_schema_missing_roi(): Verify ValueError when 'roi' key missing
        - test_load_invalid_schema_missing_fields(): Verify ValueError when x/y/width/height missing
        - test_load_negative_values(): Verify ValueError when ROI values are negative
      </idea>
      <idea ac="1.1.2">
        - test_crop_success_640x480(): Verify cropping with standard image size
        - test_crop_success_1920x1080(): Verify cropping with HD image size
        - test_crop_returns_correct_shape(): Verify cropped image has expected dimensions (height, width, 3)
        - test_crop_preserves_dtype(): Verify cropped image preserves uint8 dtype
        - test_crop_preserves_bgr_format(): Verify color channel order maintained
      </idea>
      <idea ac="1.1.3">
        - test_roi_within_bounds(): Verify cropping succeeds when ROI fully inside image
        - test_roi_at_boundaries(): Verify cropping succeeds when ROI at image edges
        - test_roi_exceeds_width(): Verify ValueError when ROI extends beyond image width
        - test_roi_exceeds_height(): Verify ValueError when ROI extends beyond image height
        - test_roi_exceeds_both(): Verify ValueError when ROI exceeds both dimensions
      </idea>
      <idea ac="1.1.4">
        - test_invalid_image_not_numpy(): Verify ValueError when image is list/tuple instead of ndarray
        - test_invalid_image_wrong_shape_2d(): Verify ValueError for grayscale images (H×W)
        - test_invalid_image_wrong_shape_4d(): Verify ValueError for images with wrong dimensions
        - test_invalid_image_wrong_dtype(): Verify ValueError for float32/int32 images instead of uint8
        - test_invalid_image_wrong_channels(): Verify ValueError for 4-channel (RGBA) images
      </idea>
      <idea ac="all">
        - test_edge_case_1x1_roi(): Verify handling of minimal 1×1 ROI
        - test_edge_case_full_image_roi(): Verify ROI can equal full image dimensions
        - test_edge_case_non_square_roi(): Verify non-square aspect ratios (e.g., 100×50)
      </idea>
    </ideas>
  </tests>
</story-context>
